-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity polar_clip is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_sample_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_sample_TVALID : IN STD_LOGIC;
    in_sample_TREADY : OUT STD_LOGIC;
    in_sample_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_sample_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_sample_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_sample_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_sample_TVALID : OUT STD_LOGIC;
    out_sample_TREADY : IN STD_LOGIC;
    out_sample_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_sample_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_sample_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of polar_clip is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "polar_clip_polar_clip,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.300000,HLS_SYN_LAT=18,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=213,HLS_SYN_LUT=1222,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_80E6FE4 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000011100110111111100100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv16_D296 : STD_LOGIC_VECTOR (15 downto 0) := "1101001010010110";
    constant ap_const_lv25_137 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100110111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal rotation_sin_lut_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal rotation_sin_lut_ce0 : STD_LOGIC;
    signal rotation_sin_lut_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal rotation_cos_lut_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal rotation_cos_lut_ce0 : STD_LOGIC;
    signal rotation_cos_lut_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_sample_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_sample_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal value_real_fu_203_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal value_real_reg_625 : STD_LOGIC_VECTOR (15 downto 0);
    signal value_imag_reg_630 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln151_fu_217_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_reg_642 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_649 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln152_fu_237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_592_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_598_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mag_sq_V_reg_667 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln41_fu_286_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln894_1_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln894_1_reg_677 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln71_fu_322_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln886_fu_406_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln882_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln886_1_fu_414_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln886_2_fu_422_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln695_fu_430_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln890_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln890_reg_727 : STD_LOGIC_VECTOR (0 downto 0);
    signal cs_fixed_real_V_fu_518_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal cs_fixed_real_V_reg_733 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal cs_fixed_imag_V_fu_548_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal cs_fixed_imag_V_reg_738 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_fu_565_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln69_fu_565_p2 : signal is "no";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal rotation_index_V_reg_157 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_step_V_1_reg_169 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_step_V_2_reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_V_reg_188 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln538_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln151_1_fu_240_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal abs_I_V_fu_246_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln46_fu_252_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln152_1_fu_243_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal abs_Q_V_fu_263_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln52_fu_269_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln890_fu_259_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln69_fu_276_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal X_step_V_fu_280_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln894_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Y_step_V_1_fu_308_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal Y_step_V_fu_302_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln63_fu_314_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal i_V_i_cast3_fu_332_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_V_i_cast_fu_336_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln73_fu_354_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1465_fu_360_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shr_i_i553148_i_fu_370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln803_fu_348_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln803_1_fu_388_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_340_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln69_3_fu_364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_5_fu_400_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln69_2_fu_382_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln69_3_fu_394_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_4_fu_376_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln69_fu_451_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln69_1_fu_469_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln95_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln90_fu_457_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln101_fu_475_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln95_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln95_1_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln95_fu_486_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln894_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln106_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln95_1_fu_499_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln95_2_fu_526_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln95_fu_534_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln95_3_fu_540_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_606_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln_fu_556_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_619_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_613_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln890_fu_571_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln890_1_fu_577_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_592_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_592_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_598_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_598_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_606_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_606_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_592_ce : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_613_ce : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_619_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal regslice_both_out_sample_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_in_sample_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in_sample_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal in_sample_TVALID_int_regslice : STD_LOGIC;
    signal in_sample_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in_sample_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_sample_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in_sample_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_in_sample_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_sample_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_sample_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in_sample_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_in_sample_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_sample_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_sample_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in_sample_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_sample_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_sample_V_last_V_U_ack_in : STD_LOGIC;
    signal out_sample_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal out_sample_TVALID_int_regslice : STD_LOGIC;
    signal out_sample_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_sample_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_sample_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_sample_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_sample_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_sample_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_sample_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_sample_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_sample_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_sample_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_sample_V_last_V_U_vld_out : STD_LOGIC;

    component polar_clip_mul_mul_16s_16s_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component polar_clip_mac_muladd_16s_16s_32s_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component polar_clip_mul_mul_10ns_25s_25_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component polar_clip_mul_mul_16s_16s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component polar_clip_rotation_sin_lut IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component polar_clip_rotation_cos_lut IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    rotation_sin_lut_U : component polar_clip_rotation_sin_lut
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => rotation_sin_lut_address0,
        ce0 => rotation_sin_lut_ce0,
        q0 => rotation_sin_lut_q0);

    rotation_cos_lut_U : component polar_clip_rotation_cos_lut
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => rotation_cos_lut_address0,
        ce0 => rotation_cos_lut_ce0,
        q0 => rotation_cos_lut_q0);

    mul_mul_16s_16s_32_4_1_U1 : component polar_clip_mul_mul_16s_16s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_592_p0,
        din1 => grp_fu_592_p1,
        ce => grp_fu_592_ce,
        dout => grp_fu_592_p2);

    mac_muladd_16s_16s_32s_32_4_1_U2 : component polar_clip_mac_muladd_16s_16s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_598_p0,
        din1 => grp_fu_598_p1,
        din2 => grp_fu_592_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_598_p3);

    mul_mul_10ns_25s_25_4_1_U3 : component polar_clip_mul_mul_10ns_25s_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 25,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_606_p0,
        din1 => grp_fu_606_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_606_p2);

    mul_mul_16s_16s_16_4_1_U4 : component polar_clip_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => cs_fixed_real_V_reg_733,
        din1 => add_ln69_fu_565_p2,
        ce => grp_fu_613_ce,
        dout => grp_fu_613_p2);

    mul_mul_16s_16s_16_4_1_U5 : component polar_clip_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => cs_fixed_imag_V_reg_738,
        din1 => add_ln69_fu_565_p2,
        ce => grp_fu_619_ce,
        dout => grp_fu_619_p2);

    regslice_both_in_sample_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_sample_TDATA,
        vld_in => in_sample_TVALID,
        ack_in => regslice_both_in_sample_V_data_V_U_ack_in,
        data_out => in_sample_TDATA_int_regslice,
        vld_out => in_sample_TVALID_int_regslice,
        ack_out => in_sample_TREADY_int_regslice,
        apdone_blk => regslice_both_in_sample_V_data_V_U_apdone_blk);

    regslice_both_in_sample_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_sample_TKEEP,
        vld_in => in_sample_TVALID,
        ack_in => regslice_both_in_sample_V_keep_V_U_ack_in,
        data_out => in_sample_TKEEP_int_regslice,
        vld_out => regslice_both_in_sample_V_keep_V_U_vld_out,
        ack_out => in_sample_TREADY_int_regslice,
        apdone_blk => regslice_both_in_sample_V_keep_V_U_apdone_blk);

    regslice_both_in_sample_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_sample_TSTRB,
        vld_in => in_sample_TVALID,
        ack_in => regslice_both_in_sample_V_strb_V_U_ack_in,
        data_out => in_sample_TSTRB_int_regslice,
        vld_out => regslice_both_in_sample_V_strb_V_U_vld_out,
        ack_out => in_sample_TREADY_int_regslice,
        apdone_blk => regslice_both_in_sample_V_strb_V_U_apdone_blk);

    regslice_both_in_sample_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_sample_TLAST,
        vld_in => in_sample_TVALID,
        ack_in => regslice_both_in_sample_V_last_V_U_ack_in,
        data_out => in_sample_TLAST_int_regslice,
        vld_out => regslice_both_in_sample_V_last_V_U_vld_out,
        ack_out => in_sample_TREADY_int_regslice,
        apdone_blk => regslice_both_in_sample_V_last_V_U_apdone_blk);

    regslice_both_out_sample_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_sample_TDATA_int_regslice,
        vld_in => out_sample_TVALID_int_regslice,
        ack_in => out_sample_TREADY_int_regslice,
        data_out => out_sample_TDATA,
        vld_out => regslice_both_out_sample_V_data_V_U_vld_out,
        ack_out => out_sample_TREADY,
        apdone_blk => regslice_both_out_sample_V_data_V_U_apdone_blk);

    regslice_both_out_sample_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_0,
        vld_in => out_sample_TVALID_int_regslice,
        ack_in => regslice_both_out_sample_V_keep_V_U_ack_in_dummy,
        data_out => out_sample_TKEEP,
        vld_out => regslice_both_out_sample_V_keep_V_U_vld_out,
        ack_out => out_sample_TREADY,
        apdone_blk => regslice_both_out_sample_V_keep_V_U_apdone_blk);

    regslice_both_out_sample_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_0,
        vld_in => out_sample_TVALID_int_regslice,
        ack_in => regslice_both_out_sample_V_strb_V_U_ack_in_dummy,
        data_out => out_sample_TSTRB,
        vld_out => regslice_both_out_sample_V_strb_V_U_vld_out,
        ack_out => out_sample_TREADY,
        apdone_blk => regslice_both_out_sample_V_strb_V_U_apdone_blk);

    regslice_both_out_sample_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => out_sample_TVALID_int_regslice,
        ack_in => regslice_both_out_sample_V_last_V_U_ack_in_dummy,
        data_out => out_sample_TLAST,
        vld_out => regslice_both_out_sample_V_last_V_U_vld_out,
        ack_out => out_sample_TREADY,
        apdone_blk => regslice_both_out_sample_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    X_step_V_1_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                X_step_V_1_reg_169 <= sext_ln41_fu_286_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln882_fu_326_p2 = ap_const_lv1_0))) then 
                X_step_V_1_reg_169 <= select_ln886_2_fu_422_p3;
            end if; 
        end if;
    end process;

    Y_step_V_2_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                Y_step_V_2_reg_179 <= sext_ln71_fu_322_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln882_fu_326_p2 = ap_const_lv1_0))) then 
                Y_step_V_2_reg_179 <= select_ln886_1_fu_414_p3;
            end if; 
        end if;
    end process;

    i_V_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_V_reg_188 <= ap_const_lv3_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln882_fu_326_p2 = ap_const_lv1_0))) then 
                i_V_reg_188 <= add_ln695_fu_430_p2;
            end if; 
        end if;
    end process;

    rotation_index_V_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                rotation_index_V_reg_157 <= ap_const_lv32_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln882_fu_326_p2 = ap_const_lv1_0))) then 
                rotation_index_V_reg_157 <= select_ln886_fu_406_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln890_reg_727 = ap_const_lv1_1))) then
                cs_fixed_imag_V_reg_738 <= cs_fixed_imag_V_fu_548_p3;
                cs_fixed_real_V_reg_733 <= cs_fixed_real_V_fu_518_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_ln890_reg_727 <= icmp_ln890_fu_446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                mag_sq_V_reg_667 <= grp_fu_598_p3;
                xor_ln894_1_reg_677 <= xor_ln894_1_fu_296_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_sample_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                ret_V_reg_642 <= in_sample_TDATA_int_regslice(31 downto 31);
                tmp_reg_649 <= in_sample_TDATA_int_regslice(15 downto 15);
                value_imag_reg_630 <= in_sample_TDATA_int_regslice(31 downto 16);
                value_real_reg_625 <= value_real_fu_203_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state6, icmp_ln882_fu_326_p2, regslice_both_out_sample_V_data_V_U_apdone_blk, in_sample_TVALID_int_regslice, out_sample_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((in_sample_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln882_fu_326_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((out_sample_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if ((not(((out_sample_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_sample_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    X_step_V_fu_280_p2 <= std_logic_vector(signed(sext_ln890_fu_259_p1) + signed(sext_ln69_fu_276_p1));
    Y_step_V_1_fu_308_p2 <= std_logic_vector(signed(sext_ln890_fu_259_p1) - signed(sext_ln69_fu_276_p1));
    Y_step_V_fu_302_p2 <= std_logic_vector(signed(sext_ln69_fu_276_p1) - signed(sext_ln890_fu_259_p1));
    abs_I_V_fu_246_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(sext_ln151_1_fu_240_p1));
    abs_Q_V_fu_263_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(sext_ln152_1_fu_243_p1));
    add_ln695_fu_430_p2 <= std_logic_vector(unsigned(i_V_reg_188) + unsigned(ap_const_lv3_1));
    add_ln69_3_fu_364_p2 <= std_logic_vector(unsigned(zext_ln1465_fu_360_p1) + unsigned(rotation_index_V_reg_157));
    add_ln69_4_fu_376_p2 <= std_logic_vector(unsigned(shr_i_i553148_i_fu_370_p2) + unsigned(X_step_V_1_reg_169));
    add_ln69_5_fu_400_p2 <= std_logic_vector(unsigned(ashr_ln803_fu_348_p2) + unsigned(Y_step_V_2_reg_179));
    add_ln69_fu_565_p2 <= std_logic_vector(signed(ap_const_lv16_D296) + signed(trunc_ln_fu_556_p4));
    and_ln106_fu_512_p2 <= (xor_ln95_fu_464_p2 and xor_ln894_fu_507_p2);
    and_ln95_1_fu_494_p2 <= (xor_ln95_fu_464_p2 and xor_ln894_1_reg_677);
    and_ln95_fu_482_p2 <= (xor_ln894_1_reg_677 and ret_V_reg_642);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ashr_ln803_1_fu_388_p2 <= std_logic_vector(shift_right(signed(Y_step_V_2_reg_179),to_integer(unsigned('0' & i_V_i_cast3_fu_332_p1(31-1 downto 0)))));
    ashr_ln803_fu_348_p2 <= std_logic_vector(shift_right(signed(X_step_V_1_reg_169),to_integer(unsigned('0' & i_V_i_cast3_fu_332_p1(31-1 downto 0)))));
    cs_fixed_imag_V_fu_548_p3 <= 
        rotation_sin_lut_q0 when (and_ln106_fu_512_p2(0) = '1') else 
        select_ln95_3_fu_540_p3;
    cs_fixed_real_V_fu_518_p3 <= 
        select_ln101_fu_475_p3 when (and_ln106_fu_512_p2(0) = '1') else 
        select_ln95_1_fu_499_p3;

    grp_fu_592_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3, in_sample_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((in_sample_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_592_ce <= ap_const_logic_1;
        else 
            grp_fu_592_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_592_p0 <= sext_ln151_fu_217_p1(16 - 1 downto 0);
    grp_fu_592_p1 <= sext_ln151_fu_217_p1(16 - 1 downto 0);
    grp_fu_598_p0 <= sext_ln152_fu_237_p1(16 - 1 downto 0);
    grp_fu_598_p1 <= sext_ln152_fu_237_p1(16 - 1 downto 0);
    grp_fu_606_p0 <= ap_const_lv25_137(10 - 1 downto 0);
    grp_fu_606_p1 <= X_step_V_1_reg_169(25 - 1 downto 0);

    grp_fu_613_ce_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, out_sample_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((out_sample_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            grp_fu_613_ce <= ap_const_logic_1;
        else 
            grp_fu_613_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_619_ce_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, out_sample_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((out_sample_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            grp_fu_619_ce <= ap_const_logic_1;
        else 
            grp_fu_619_ce <= ap_const_logic_0;
        end if; 
    end process;

    i_V_i_cast3_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_V_reg_188),32));
    i_V_i_cast_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_V_reg_188),6));
    icmp_ln882_fu_326_p2 <= "1" when (i_V_reg_188 = ap_const_lv3_6) else "0";
    icmp_ln890_fu_446_p2 <= "1" when (signed(mag_sq_V_reg_667) > signed(ap_const_lv32_80E6FE4)) else "0";
    icmp_ln894_fu_290_p2 <= "1" when (signed(select_ln52_fu_269_p3) < signed(select_ln46_fu_252_p3)) else "0";

    in_sample_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, in_sample_TVALID_int_regslice)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            in_sample_TDATA_blk_n <= in_sample_TVALID_int_regslice;
        else 
            in_sample_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_sample_TREADY <= regslice_both_in_sample_V_data_V_U_ack_in;

    in_sample_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state1, in_sample_TVALID_int_regslice)
    begin
        if (((in_sample_TVALID_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_sample_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in_sample_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    out_sample_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, out_sample_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            out_sample_TDATA_blk_n <= out_sample_TREADY_int_regslice;
        else 
            out_sample_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_sample_TDATA_int_regslice <= (select_ln890_fu_571_p3 & select_ln890_1_fu_577_p3);
    out_sample_TVALID <= regslice_both_out_sample_V_data_V_U_vld_out;

    out_sample_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state13, out_sample_TREADY_int_regslice)
    begin
        if (((out_sample_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            out_sample_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_sample_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    rotation_cos_lut_address0 <= zext_ln538_fu_440_p1(6 - 1 downto 0);

    rotation_cos_lut_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            rotation_cos_lut_ce0 <= ap_const_logic_1;
        else 
            rotation_cos_lut_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rotation_sin_lut_address0 <= zext_ln538_fu_440_p1(6 - 1 downto 0);

    rotation_sin_lut_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            rotation_sin_lut_ce0 <= ap_const_logic_1;
        else 
            rotation_sin_lut_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln101_fu_475_p3 <= 
        sub_ln69_1_fu_469_p2 when (tmp_reg_649(0) = '1') else 
        rotation_cos_lut_q0;
    select_ln46_fu_252_p3 <= 
        abs_I_V_fu_246_p2 when (tmp_reg_649(0) = '1') else 
        sext_ln151_1_fu_240_p1;
    select_ln52_fu_269_p3 <= 
        abs_Q_V_fu_263_p2 when (ret_V_reg_642(0) = '1') else 
        sext_ln152_1_fu_243_p1;
    select_ln63_fu_314_p3 <= 
        Y_step_V_1_fu_308_p2 when (xor_ln894_1_fu_296_p2(0) = '1') else 
        Y_step_V_fu_302_p2;
    select_ln886_1_fu_414_p3 <= 
        add_ln69_5_fu_400_p2 when (tmp_1_fu_340_p3(0) = '1') else 
        sub_ln69_2_fu_382_p2;
    select_ln886_2_fu_422_p3 <= 
        sub_ln69_3_fu_394_p2 when (tmp_1_fu_340_p3(0) = '1') else 
        add_ln69_4_fu_376_p2;
    select_ln886_fu_406_p3 <= 
        rotation_index_V_reg_157 when (tmp_1_fu_340_p3(0) = '1') else 
        add_ln69_3_fu_364_p2;
    select_ln890_1_fu_577_p3 <= 
        grp_fu_613_p2 when (icmp_ln890_reg_727(0) = '1') else 
        ap_const_lv16_0;
    select_ln890_fu_571_p3 <= 
        grp_fu_619_p2 when (icmp_ln890_reg_727(0) = '1') else 
        ap_const_lv16_0;
    select_ln90_fu_457_p3 <= 
        sub_ln69_fu_451_p2 when (tmp_reg_649(0) = '1') else 
        rotation_sin_lut_q0;
    select_ln95_1_fu_499_p3 <= 
        select_ln90_fu_457_p3 when (and_ln95_1_fu_494_p2(0) = '1') else 
        select_ln95_fu_486_p3;
    select_ln95_2_fu_526_p3 <= 
        rotation_cos_lut_q0 when (and_ln95_fu_482_p2(0) = '1') else 
        rotation_sin_lut_q0;
    select_ln95_3_fu_540_p3 <= 
        rotation_cos_lut_q0 when (and_ln95_1_fu_494_p2(0) = '1') else 
        sub_ln95_fu_534_p2;
    select_ln95_fu_486_p3 <= 
        select_ln90_fu_457_p3 when (and_ln95_fu_482_p2(0) = '1') else 
        select_ln101_fu_475_p3;
        sext_ln151_1_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(value_real_reg_625),17));

        sext_ln151_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(value_real_fu_203_p1),32));

        sext_ln152_1_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(value_imag_reg_630),17));

        sext_ln152_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(value_imag_reg_630),32));

        sext_ln41_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(X_step_V_fu_280_p2),32));

        sext_ln69_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln52_fu_269_p3),18));

        sext_ln71_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln63_fu_314_p3),32));

        sext_ln890_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln46_fu_252_p3),18));

    shl_ln73_fu_354_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv6_1),to_integer(unsigned('0' & i_V_i_cast_fu_336_p1(6-1 downto 0)))));
    shr_i_i553148_i_fu_370_p2 <= std_logic_vector(shift_right(unsigned(Y_step_V_2_reg_179),to_integer(unsigned('0' & i_V_i_cast3_fu_332_p1(31-1 downto 0)))));
    sub_ln69_1_fu_469_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(rotation_cos_lut_q0));
    sub_ln69_2_fu_382_p2 <= std_logic_vector(unsigned(Y_step_V_2_reg_179) - unsigned(ashr_ln803_fu_348_p2));
    sub_ln69_3_fu_394_p2 <= std_logic_vector(unsigned(X_step_V_1_reg_169) - unsigned(ashr_ln803_1_fu_388_p2));
    sub_ln69_fu_451_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(rotation_sin_lut_q0));
    sub_ln95_fu_534_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(select_ln95_2_fu_526_p3));
    tmp_1_fu_340_p3 <= Y_step_V_2_reg_179(31 downto 31);
    trunc_ln_fu_556_p4 <= grp_fu_606_p2(24 downto 9);
    value_real_fu_203_p1 <= in_sample_TDATA_int_regslice(16 - 1 downto 0);
    xor_ln894_1_fu_296_p2 <= (icmp_ln894_fu_290_p2 xor ap_const_lv1_1);
    xor_ln894_fu_507_p2 <= (xor_ln894_1_reg_677 xor ap_const_lv1_1);
    xor_ln95_fu_464_p2 <= (ret_V_reg_642 xor ap_const_lv1_1);
    zext_ln1465_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln73_fu_354_p2),32));
    zext_ln538_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rotation_index_V_reg_157),64));
end behav;
